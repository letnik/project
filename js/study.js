'use strict';

// // let number = 5;
// // const leftBorderWidth = 1;
// // number = 10;

// // console.log(number);

// // const obj = {
// //     a: 50
// // };
// // console.log(obj);
// // obj.a = 10;

// // console.log(obj);


// // const result = confirm('Are you here?');
// // console.log(result);

// // const answer = +prompt("І шо скажеш?", ""); 
// // console.log(answer + 5);

// // const answers = [];

// // answers[0] = prompt('Як Вас звати?', '');
// // answers[1] = prompt('Ваше прізвише', '');
// // answers[2] = +prompt('Скільки Вам років?', ''); 
// // унарний плюс - плюс який перетворює строку в число

// // console.log(typeof(answers));
// // console.log(answers);
// // document.write('<div style="color: red">' + answers + '</div>');

// // Інтерполяція

// // const category = 'cars';

// // console.log(`https://site.com/${category}/5`);

// // // інкримент, декримент
// // let incr = 10,
// //     decr = 10;

// // // оператор інкримента
// // incr++;  // постфіксна форма інкримента
// // // ++in cr;  // префіксна форма інкримента

// // // оператор декотмента
// // decr--;

// // console.log(incr);
// // console.log(decr);

// // залишок ділення
// // console.log(8%3);

// // && - and
// // || - or

// // const isChecked = true,
// //       isClose = false;
 
// // console.log(isChecked || isClose);





// // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




// /* Задание на урок:

// 1) Создать переменную numberOfFilms и в неё поместить ответ от пользователя на вопрос:
// 'Сколько фильмов вы уже посмотрели?'

// 2) Создать объект personalMovieDB и в него поместить такие свойства:
//     - count - сюда передается ответ на первый вопрос
//     - movies - в это свойство поместить пустой объект
//     - actors - тоже поместить пустой объект
//     - genres - сюда поместить пустой массив
//     - privat - в это свойство поместить boolean(логическое) значение false

// 3) Задайте пользователю по два раза вопросы:
//     - 'Один из последних просмотренных фильмов?'
//     - 'На сколько оцените его?'
// Ответы стоит поместить в отдельные переменные
// Записать ответы в объект movies в формате: 
//     movies: {
//         'logan': '8.1'
//     }

// Проверить, чтобы все работало без ошибок в консоли */


// // const numberOfFilms = +prompt('Сколько фильмов вы уже посмотрели?', '');

// // const personalMovieDB = {
// //     count: numberOfFilms,
// //     movies: {},
// //     actors: {},
// //     genres: [],
// //     privat: false

// // };

// // for (let i = 0; i < 2; i++) {

// //     const   a = prompt('Один из последних просмотренных фильмов?', ''),
// //             b = prompt('На сколько оцените его?', '');

// //     if (a != null && b != null && a != '' && b != '' && a.length < 50 && b.length < 50) {
// //         personalMovieDB.movies[a] = b;
// //         console.log('Ok!')
// //     } else {
// //         console.log('Err!')
// //         i--;        
// //     }

// // }

// // let i = 0

// // while (i < 2) {
// //     const   a = prompt('Один из последних просмотренных фильмов?', ''),
// //             b = prompt('На сколько оцените его?', '');

// //     if (a != null && b != null && a != '' && b != '' && a.length < 50 && b.length < 50) {
// //         personalMovieDB.movies[a] = b;
// //         console.log('Ok!')
// //         i++
// //     } else {
// //         console.log('Err!')    
// //     }
// // }

// // if ( personalMovieDB.count < 10 ) {
// //     console.log('Переглянуто доволі мало фільмів')
// // } else if ( personalMovieDB.count >= 10 && personalMovieDB.count <= 30 ) {
// //     console.log('ви хороший глядач')
// // } else if ( personalMovieDB.count > 30 ) {
// //     console.log('ви кіноман')
// // } else {
// //     console.log('error')
// // }


// // console.log(personalMovieDB); 

// // тернарний оператор

// // const num = 50;

// // (num === 50) ? console.log('Ok!') : console.log('Err');

// // // бінарний
// // 4 + 4

// // // унарний

// // +'1'



// // const num = 52;

// // switch (num) {
// //     case 49:
// //         console.log('No');
// //         break;
// //     case 100:
// //         console.log('No');
// //         break;
// //     case 50:
// //         console.log('is true');
// //         break; 
// //     default:
// //         console.log('default');
// //         break;
// // }


// // let num = 50;

// // while(num <= 55) {
// //     console.log(num);
// //     num++;
// // }


// // do {
// //     console.log(num);
// //     num++;
// // }

// // while(num <= 55);

// // for (let i = num; i <= 55; i++) {
// //     console.log(i);
// // }


// // let num = 50;
// // for (let i = 1; i <= 10; i++) {
 
// //     if(i === 6) {
// //         // break;
// //         continue;
// //     }

// //     console.log(i)

// //     // console.log(num);
// //     // num++;
// // }

// // let num = 5;

// // function showFirstMessege(hello) {
// //     console.log(hello);
// //     let num = 10;
// //     console.log(num);
// // }

// // showFirstMessege('Hello Oss!');
// // console.log(num);



// // function calc(a, b) {
// //     return (a + b);
// // }

// // console.log(calc(3, 4))
// // console.log(calc(13, 14))
// // console.log(calc(31, 41))

// // const calc = (a, b) => { return a + b };

// // console.log(calc(1, 2));

// // const logg = "Hello Ossss!";
// // // console.log(logg.toUpperCase());
// // // console.log(logg.indexOf('Oss'));
// // // console.log(logg.slice(6, 12));
// // // console.log(logg.substring(6,12));
// // // console.log(logg.substr(6,6));
// // console.log(logg.length);

// // const num = 10/3;
// // console.log(num);
// // console.log(Math.round(num));


// // const border = '12.3px';
// // console.log(parseInt(border));
// // console.log(parseFloat(border));





// // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




// /* Задание на урок:

// 1) Первую часть задания повторить по уроку

// 2) Создать функцию showMyDB, которая будет проверять свойство privat. Если стоит в позиции
// false - выводит в консоль главный объект программы

// 3) Создать функцию writeYourGenres в которой пользователь будет 3 раза отвечать на вопрос 
// "Ваш любимый жанр под номером ${номер по порядку}". Каждый ответ записывается в массив данных
// genres

// P.S. Функции вызывать не обязательно*/

// // Код возьмите из предыдущего домашнего задания



// let numberOfFilms;

// function start() {
//     numberOfFilms = +prompt('Сколько фильмов вы уже посмотрели?', '');

//     while (numberOfFilms == '' || numberOfFilms == null || isNaN(numberOfFilms)) {
//         numberOfFilms = +prompt('Сколько фильмов вы уже посмотрели?', '');
//     }
// }
 
// start();

// const personalMovieDB = {
//     count: numberOfFilms,
//     movies: {},
//     actors: {},
//     genres: [], 
//     privat: false
// };




// function rememberMyFilms() {
//     for (let i = 0; i < 2; i++) {

//         const   a = prompt('Один из последних просмотренных фильмов?', ''),
//                 b = prompt('На сколько оцените его?', '');
    
//         if (a != null && b != null && a != '' && b != '' && a.length < 50 && b.length < 50) {
//             personalMovieDB.movies[a] = b;
//             console.log('Ok!')
//         } else {
//             console.log('Err!')
//             i--;        
//         }
    
//     } 
// }
// rememberMyFilms();

// function detectPersonalLevel() {

//     if ( personalMovieDB.count < 10 ) {
//         console.log('Переглянуто доволі мало фільмів')
//     } else if ( personalMovieDB.count >= 10 && personalMovieDB.count <= 30 ) {
//         console.log('ви хороший глядач')
//     } else if ( personalMovieDB.count > 30 ) {
//         console.log('ви кіноман')
//     } else {
//         console.log('error')
//     }
// }

// detectPersonalLevel();


// // function showMyDB() {
// //     if ( personalMovieDB.privat === false ) {
// //         console.log(personalMovieDB)
// //     }
// // }

// // showMyDB();


// function showMyDB(hidden) {
//     if (!hidden) {
//         console.log(personalMovieDB)
//     }
// }
 
// showMyDB(personalMovieDB.privat);



// // console.log(personalMovieDB); 

// function writeYourGenres() {
//     for (let i = 1; i <= 3; i++) {
//         const genres = prompt(`Ваш любим ый жанр под номером ${i}`);
//         personalMovieDB.genres[i - 1] = genres;
//     }
// }
// writeYourGenres();


// // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// // practic

// і

// function lernJS(leng, callback) {
//     console.log(`Я вчу  ${leng}`);
//     callback();
// }

// function done() {
//     console.log("Я завершив даний урок!");
// }

// lernJS('JavaScript', done);

// // lernJS( 'JavaScript', function() {
// //     console.log("Я завершив даний урок!");
// // });

 
// console.log(Object.keys(option).length);


// const arr = [1, 2, 3, 4, 5, 6, 7, 8];

// // arr[99] = 666;
// // console.log(arr);
// // console.log(arr.length);

// // arr.pop(); 

// // arr.push(3, 'opa-opa');

// // console.log(arr); 

// // for (let i = 0; i < arr.length; i++) {
// //     console.log(arr[i]);
// // }


// // for (let value of arr) {
// //     console.log(value);
// // }


// const arr = [1, 2, 3, 4, 5, 6, 7, 8];
// arr.forEach(function(item, i, arr){
//     console.log(`${i}: ${item} - в середині масиву ${arr}`);
// });


// const arr = [1, 2, 13, 24, 5, 56, 7, 58];
// arr.sort(compareNan);
// console.log(arr);
 
// function compareNan(a, b) {
//      return a - b;
// }



// УРОК 1.
// Как проходить данный курс

// УРОК 2.
// Настройка рабочего пространства

// УРОК 3.
// Как работать с JSHint

// УРОК 4. (02-01)
// Что такое JS и как его подключить к странице

// УРОК 5. (02-02)
// Переменные и строгий режим

// УРОК 6. (02-03)
// Классификация типов данных в JavaScript

// УРОК 7. (02-04)
// Простое общение с пользователем

// УРОК 8. (02-05)
// Интерполяция (ES6)

// УРОК 9. (02-06)
// Операторы в JS

// УРОК 10. (02-07)
// Учимся работать с системой контроля версий Git и с сервисом GitHub

// УРОК 11. (02-08)
// Как работать с GitHub с разных компьютеров, gitignore и Git Kraken

// УРОК 12. (02-09)
// Практика, ч.1. Начинаем создавать приложение

// УРОК 13. (02-010)
// Условия

// УРОК 14. (02-011)
// Циклы

// УРОК 15. (02-012)
// Практика, ч2. Применяем условия и циклы


////////////////////////////////////////////////////////
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> //
////////////////////////////////////////////////////////


// УРОК 16. (02-013)
// Функции, стрелочные ф-ции (ES6)

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    // > function declaration
    function foo() {
        // code
    }
    // дана функція існує, ще до того як код починає відпрацьовувати.
    // іншими словами функціця працює до того як була викликана.

        // **************//

    // > function expression
    let foo = function() {
            // code
    };

        // **************//

    // > стрілочні функції
    ()=>
    // не мають свого контексту (this)


// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

let num = 20;

function showFirstMessege(text) {
    console.log(text);
    num = 10;
}

showFirstMessege('Hello world');
console.log(num);

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    // замикання функції, це сама функція зі всіма зовнішніми   перемінними якій їй доступні

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

function calc(a, b) {
    return(a + b);  
    // після return код не працює. зупиняється.
}
console.log(calc(7, 4));
console.log(calc(22, 31));
console.log(calc(4, 13));

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

function ret() {
    let num = 100;
    return num;
}

// console.log(ret());

const anotherNum = ret();
console.log(anotherNum);

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

const logger = function() {
    console.log("Hello")
};
logger();

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

const calc = (a, b) => a + b;
const calc = (a, b) => { return a + b };
const calc = (a, b) => { 
    console.log('function working...')
    return a + b 
};
console.log(calc(9,4));











////////////////////////////////////////////////////////
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> //
////////////////////////////////////////////////////////


// УРОК 17. (02-014) Методы и свойства строк и чисел

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    // методи - це допоміжні функції
    // свойства - це допоміжні значення
    // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

const str = 'teSt';
const arr = [1, 4, 6, 8, 10, 15, 20, 40]

    // властивості
console.log(str.length);
console.log(arr.length);
console.log(str[2]);

    // методи
console.log(str.toUpperCase());
console.log(str.toLowerCase());

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

let fruit = 'Some fruit';
console.log(fruit.indexOf('fruit'));


// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

const log = 'Hello world!';

console.log(log.slice(6, 10));
console.log(log.slice(6));
console.log(log.slice(-5, 1));

console.log(log.substring(6, 10)); // не підтримує відємні числа

console.log(log.substr(6, 5)); // аргімент #2 це довжина

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

let num = 12.7;
console.log(Math.round(num));

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

let height = 11.2;
let height = '11.2px';
console.log(parseInt(height));
console.log(parseFloat(height));








////////////////////////////////////////////////////////
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> //
////////////////////////////////////////////////////////


// УРОК 18. (02-015) Практика , ч3. Используем функции

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>






let numberOfFilms;

function start() {
    numberOfFilms = +prompt('Сколько фильмов вы уже посмотрели?', '');

    while (numberOfFilms == '' || numberOfFilms == null || isNaN(numberOfFilms)) {
        numberOfFilms = +prompt('Сколько фильмов вы уже посмотрели?', '');
    }
}
 
start();

const personalMovieDB = {
    count: numberOfFilms,
    movies: {},
    actors: {},
    genres: [], 
    privat: false
};




function rememberMyFilms() {
    for (let i = 0; i < 2; i++) {

        const   a = prompt('Один из последних просмотренных фильмов?', ''),
                b = prompt('На сколько оцените его?', '');
    
        if (a != null && b != null && a != '' && b != '' && a.length < 50 && b.length < 50) {
            personalMovieDB.movies[a] = b;
            console.log('Ok!')
        } else {
            console.log('Err!')
            i--;        
        }
    
    } 
}
rememberMyFilms();

function detectPersonalLevel() {

    if ( personalMovieDB.count < 10 ) {
        console.log('Переглянуто доволі мало фільмів')
    } else if ( personalMovieDB.count >= 10 && personalMovieDB.count <= 30 ) {
        console.log('ви хороший глядач')
    } else if ( personalMovieDB.count > 30 ) {
        console.log('ви кіноман')
    } else {
        console.log('error')
    }
}

detectPersonalLevel();


// function showMyDB() {
//     if ( personalMovieDB.privat === false ) {
//         console.log(personalMovieDB)
//     }
// }

// showMyDB();


function showMyDB(hidden) {
    if (!hidden) {
        console.log(personalMovieDB)
    }
    else {
        // console.log('База даних  прихована');
        console.log('Database hidden');
    }
}
 
showMyDB(personalMovieDB.privat);



// console.log(personalMovieDB); 

function writeYourGenres() {
    for (let i = 1; i <= 3; i++) {
        const genres = prompt(`Ваш любим ый жанр под номером ${i}`);
        personalMovieDB.genres[i - 1] = genres;
    }
}
writeYourGenres();










// УРОК 19.
// 00:07:24
// Callback- функции
// УРОК 20.
// 00:24:35
// Объекты, деструктуризация объектов (ES6)
// УРОК 21.
// 00:23:51
// Массивы и псевдомассивы
// УРОК 22.
// 00:24:58
// Передача по ссылке или по значению, Spread оператор (ES6-ES9)
// УРОК 23.
// 00:16:25
// Основы ООП, прототипно-ориентированное наследование
// УРОК 24.
// 00:20:57
// Практика , ч4. Используем объекты
// УРОК 25.
// 00:13:37
// Отлавливаем ошибки в своем коде при помощи консоли разработчика. Breakpoints
// УРОК 26.
// 00:14:21
// Динамическая типизация в JS
// УРОК 27.
// 00:17:56
// Задачи с собеседований на понимание основ
// УРОК 28.
// 00:18:18
// Получение элементов со страницы
// УРОК 29.
// 00:34:59
// Действия с элементами на странице
// УРОК 30.
// 00:20:50
// Практика. Задание на отработку действий со страницей
// УРОК 31.
// 00:26:21
// События и их обработчики
// УРОК 32.
// 00:15:40
// Навигация по DOM - элементам, data-атрибуты, преимущество for/of
// УРОК 33.
// 00:32:47
// Практика. Используем события на странице проекта
// УРОК 34.
// 00:13:23
// События на мобильных устройствах
// УРОК 35.
// 00:15:00
// Async, defer, динамические скрипты
// УРОК 36.
// 00:02:00
// Про что будет этот модуль
// УРОК 37.
// 00:21:35
// ClassList и делегирование событий
// УРОК 38.
// 00:22:20
// Создаем табы в новом проекте
// УРОК 39.
// 00:21:29
// Скрипты и время их выполнения. setTimeout и setInterval
// УРОК 40.
// 00:17:37
// Работа с датами
// УРОК 41.
// 00:25:30
// Создаем таймер обратного отсчета на сайте
// УРОК 42.
// 00:23:29
// Параметры документа, окна и работа с ними
// УРОК 43.
// 00:19:09
// Создаем модальное окно
// УРОК 44.
// 00:11:05
// Модификации модального окна
// УРОК 45.
// 00:10:37
// Функции-конструкторы
// УРОК 46.
// 00:27:07
// Контекст вызова. This
// УРОК 47.
// 00:15:52
// Классы (ES6)
// УРОК 48.
// 00:18:59
// Используем классы в реальной работе
// УРОК 49.
// 00:17:02
// Rest оператор и параметры по умолчанию (ES6)
// УРОК 50.
// 00:11:20
// Локальные сервера
// УРОК 51.
// 00:09:14
// JSON формат передачи данных, глубокое клонирование объектов
// УРОК 52.
// 00:26:25
// AJAX и общение с сервером
// УРОК 53.
// 00:26:18
// Реализация скрипта отправки данных на сервер
// УРОК 54.
// 00:24:41
// Красивое оповещение пользователя
// УРОК 55.
// 00:26:19
// Promise (ES6)
// УРОК 56.
// 00:20:48
// Fetch API
// УРОК 57.
// 00:29:00
// Методы перебора массивов
// УРОК 58.
// 00:18:38
// Подробно про npm и проект. JSON-server
// УРОК 59.
// 00:32:44
// Получение данных с сервера. Async/Await (ES8)
// УРОК 60.
// 00:08:55
// Дополнительно: Что такое библиотеки. Библиотека axios
// УРОК 61.
// 00:17:05
// Создаем слайдер на сайте, вариант 1
// УРОК 62.
// 00:23:35
// Создаем слайдер на сайте, вариант 2
// УРОК 63.
// 00:15:51
// Создаем навигацию для слайдов
// УРОК 64.
// 00:16:28
// Как сохранить данные без БД. Работа с localStorage
// УРОК 65.
// 00:23:49
// Регулярные выражения
// УРОК 66.
// 00:32:23
// Создаем калькулятор на сайте, часть 1
// УРОК 67.
// 00:18:23
// Создаем калькулятор на сайте, часть 2
// УРОК 68.
// 00:05:09
// Геттеры и сеттеры (свойства объектов)
// УРОК 69.
// 00:20:21
// Инкапсуляция
// УРОК 70.
// 00:09:35
// Прием модуль, как и зачем его использовать
// УРОК 71.
// 00:29:05
// Webpack. Собираем наш проект
// УРОК 72.
// 00:10:39
// ES6 Modules
// УРОК 73.
// 00:33:50
// Собираем наш проект и фиксим баги
// УРОК 74.
// 00:08:13
// Формируем портфолио на GitHub
// УРОК 75.
// 00:11:01
// Ошибки. Как избежать “поломки” своего кода
// УРОК 76.
// 00:20:40
// Как превратить код ES6+ в старый формат ES5. Babel, Core.js и полифиллы
// УРОК 77.
// 00:19:59
// Современные библиотеки и фрэймворки
// УРОК 78.
// 00:29:21
// Библиотека Jquery
// УРОК 79.
// 00:08:00
// Функции-генераторы
// УРОК 80.
// 00:12:12
// JS анимации, requestAnimationFrame
// УРОК 81.
// 00:23:13
// Event loop, подробная работа асинхронных и синхронных операций
// УРОК 82.
// 00:16:55
// Работаем с готовым кодом
// УРОК 83.
// 00:02:42
// Введение
// УРОК 84.
// 00:03:32
// Что такое реакт, зачем он нам и почему не обычный JS
// УРОК 85.
// 00:16:32
// Фундаментальные принципы Реакта
// УРОК 86.
// 00:13:36
// Create React App - создаем свое приложение
// УРОК 87.
// 00:28:05
// Работаем с JSX-препроцессором, ограничения в нем
// УРОК 88.
// 00:26:07
// Элементы и компоненты
// УРОК 89.
// 00:04:37
// Строгий режим
// УРОК 90.
// 00:43:39
// Создание нового проекта
// УРОК 91.
// 00:13:04
// Свойства компонентов
// УРОК 92.
// 00:20:01
// Практика свойств на проекте
// УРОК 93.
// 00:14:56
// Работа со списками и алгоритм согласования
// УРОК 94.
// 00:18:22
// Состояния компонентов
// УРОК 95.
// 00:03:32
// Самостоятельное задание на работу с состояниями
// УРОК 96.
// 00:17:14
// События в React и вспоминаем this
// УРОК 97.
// 00:07:41
// Практика состояний на проекте
// УРОК 98.
// 00:10:26
// Работа с формами, управляемые и неуправляемые компоненты
// УРОК 99.
// 00:24:24
// Иммутабельность состояния и собственные события
// УРОК 100.
// 00:31:16
// Практика. Подъём состояния
// УРОК 101.
// 00:05:04
// React-фрагменты
// УРОК 102.
// 00:36:55
// Практика. Реализуем поиск и фильтры
// УРОК 103.
// 00:08:59
// Семантика и доступность контента
// УРОК 104.
// 00:05:40
// Стили в React. Inline Styles
// УРОК 105.
// 00:08:11
// Стили в React. CSS и SASS/SCSS
// УРОК 106.
// 00:04:06
// Стили в React. Динамические классы и стили
// УРОК 107.
// 00:20:43
// Стили в React. Styled Components
// УРОК 108.
// 00:14:35
// Стили в React. Готовые библиотеки компонентов со стилями
// УРОК 109.
// 00:07:16
// Поля классов и static
// УРОК 110.
// 00:02:19
// Заключение модуля
// УРОК 111.
// 00:12:10
// Что такое API и как работают реальные приложения
// УРОК 112.
// 00:28:57
// Новый проект и работа с сервером
// УРОК 113.
// 00:32:00
// Трансформация данных и компонент со случайным персонажем
// УРОК 114.
// 00:25:11
// Хороший тон приложения (спиннер, ошибки...)
// УРОК 115.
// 00:23:52
// Жизненный цикл компонентов
// УРОК 116.
// 00:38:37
// Практика с жизненным циклом, componentDidUpdate
// УРОК 117.
// 00:18:32
// Предохранители (Error Boundaries)
// УРОК 118.
// 00:28:45
// Пагинация данных (дозагрузка персонажей)
// УРОК 119.
// 00:07:19
// Проверка типов с помощью PropTypes
// УРОК 120.
// 00:18:41
// Вставка элементов через props.children
// УРОК 121.
// 00:04:01
// Специализация и наследование
// УРОК 122.
// 00:13:26
// Render-props паттерн
// УРОК 123.
// 00:20:24
// Что такое ref и зачем он нужен
// УРОК 124.
// 00:15:16
// Порталы
// УРОК 125.
// 00:28:05
// “Бандлинг” и выгрузка проекта на сервер
// УРОК 126.
// 00:05:33
// Введение в хуки
// УРОК 127.
// 00:27:36
// useState
// УРОК 128.
// 00:22:01
// useEffect
// УРОК 129.
// 00:13:19
// useCallback
// УРОК 130.
// 00:14:17
// useMemo
// УРОК 131.
// 00:10:59
// useRef
// УРОК 132.
// 00:22:52
// Практика. Перепишем весь проект на хуки
// УРОК 133.
// 00:23:53
// Создание собственных хуков
// УРОК 134.
// 00:44:35
// Практика собственных хуков на проекте
// УРОК 135.
// 00:32:42
// Навигация в приложении, React Router v5+
// УРОК 136.
// 00:21:55
// React Router v6+
// УРОК 137.
// 00:34:44
// Практика создания динамических путей
// УРОК 138.
// 00:26:13
// Динамические импорты и React.lazy
// УРОК 139.
// 00:30:15
// React.memo, Pure Component и оптимизация скорости работы приложения
// УРОК 140.
// 00:33:48
// React Context и useContext
// УРОК 141.
// 00:20:44
// useReducer
// УРОК 142.
// 00:27:52
// Компоненты высшего порядка (HOC)
// УРОК 143.
// 00:02:18
// Библиотеки и экосистема React
// УРОК 144.
// 00:44:19
// React Transition Group
// УРОК 145.
// 00:53:35
// Formik, Yup и работа с формами любой сложности, часть 1
// УРОК 146.
// 00:31:15
// Formik, Yup и работа с формами любой сложности, часть 2
// УРОК 147.
// 00:14:43
// Разбор домашнего задания
// УРОК 148.
// 00:17:36
// SEO-оптимизация веб-приложений, React-helmet
// УРОК 149.
// 00:52:44
// !Принцип конечного автомата (FSM, Finite-state machine) и +1 подход к состояниям
// УРОК 150.
// 00:14:23
// Разбираем ошибки сторонних библиотек и проблему с фокусом
// УРОК 151.
// 00:15:33
// Основные принципы Redux. Теория
// УРОК 152.
// 00:35:06
// Основные принципы Redux. Практика
// УРОК 153.
// 00:09:09
// Чистые функции
// УРОК 154.
// 00:15:18
// Оптимизация через actionCreators и bindActionCreator
// УРОК 155.
// 00:14:10
// Добавим React в проект
// УРОК 156.
// 00:24:36
// Соединяем React и Redux при помощи connect
// УРОК 157.
// 00:17:15
// Соединяем React и Redux при помощи хуков
// УРОК 158.
// 00:04:19
// Redux devtools
// УРОК 159.
// 00:27:25
// Правило названия action и домашнее задание (мини-экзамен)
// УРОК 160.
// 00:10:27
// Разбор самых сложных моментов
// УРОК 161.
// 00:28:19
// Комбинирование reducers и красивые селекторы. CreateSelector()
// УРОК 162.
// 00:01:35
// Про сложность реальной разработки
// УРОК 163.
// 00:10:24
// Store enhancers
// УРОК 164.
// 00:09:58
// Middleware
// УРОК 165.
// 00:09:59
// Redux-thunk
// УРОК 166.
// 00:13:23
// Redux Toolkit: configureStore()
// УРОК 167.
// 00:07:33
// Redux Toolkit: createAction()
// УРОК 168.
// 00:22:04
// Redux Toolkit: createReducer()
// УРОК 169.
// 00:21:58
// Redux Toolkit: createSlice()
// УРОК 170.
// 00:20:33
// Redux Toolkit: createAsyncThunk()
// УРОК 171.
// 00:36:23
// Redux Toolkit: createEntityAdapter()
// УРОК 172.
// 00:06:14
// Подводные камни домашнего задания
// УРОК 173.
// 00:04:16
// Про разные структуры проектов и закрепление материала
// УРОК 174.
// 00:56:14
// ! Redux Toolkit: RTK Query
// УРОК 175.
// 00:01:40
// Что дальше?
// УРОК 176.
// 00:01:35
// Эпилог
// УРОК 177.
// 00:03:43
// Вступление к практическому курсу
// УРОК 178.
// 00:15:37
// Настраиваем сборку проекта и разбираемся с ТЗ
// УРОК 179.
// 00:30:45
// Работа с модальными окнами
// УРОК 180.
// 00:25:09
// Работа с табами (вкладками) на странице
// УРОК 181.
// 00:31:10
// Работа с формами отправки данных
// УРОК 182.
// 00:18:46
// Работа с формой-калькулятором, часть 1
// УРОК 183.
// 00:38:54
// Работа с формой-калькулятором, часть 2
// УРОК 184.
// 00:22:02
// Работа с таймером
// УРОК 185.
// 00:11:08
// Реализуем модуль с показом изображений
// УРОК 186.
// 00:11:32
// Улучшаем наш проект (анимации, правильное поведение overflow)